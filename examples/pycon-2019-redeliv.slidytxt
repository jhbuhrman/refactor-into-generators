PyCon 2019
==========
:author:    Jan-Hein Bührman
:copyright: Jan-Hein Bührman
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:

.What to expect
[role="incremental"]
* Introduction
* Highlites of some of the presentations
* References / links


What is PyCon?
--------------
[role="incremental"]
* Worlds largest annual gathering of the Python community
* Tutorial days (2, Wed & Thu)
* Conference days (3, Fri, Sat, Sun)
** Schedule talks
** Open spaces (informal presentations or dicussions)
** Lightning talks (quick 5 minute talks)
** Expo hall (sponsors, Fri & Sat)
** Poster session & Job Fair (on Sun)
* Development sprints (4, Mon thru Thu)

Where?
------
* In Cleveland, OH, USA
+
image::images/cleveland-map-scaled.png[alt=ClevelandOnMap]

Compared to other conferences (CodeOne, Devoxx)
----------------------------------------------
[role="incremental"]
* Emphasis on _diversity_ & _inclusivity_
* In all aspects...
** Gender (...)
** Sexual orientation
** People with a larger ``distance'' to the labour-marketplace
*** E.g. convicted criminal presenting a keynote on how he worked himself out of the US justice-system trap
* No sponsor-bought dull keynotes
* Presentations:
** Hardly any big names
*** Except for Raymond Hettinger
** 6 in parallel
** Shorter in time (30 min.)
** No live coding witnessed
** Many (not all though) reading out from notes
* All presentations available on YouTube, with subtitles
** (links follow later)

// FIXME: pictures of the conf.centre, central hall, walrus-operator


Actual Presentations
--------------------
The next slides will highlite some of the given presentations


Russell Keith-Magee: Keynote: Future of Python
----------------------------------------------

https://youtu.be/ftP5BQh1-YM?t=1243
[role="incremental"]
* Main topic was how to prevent that Python will eventually becomes that annoying legacy language
* In other words: what do we need to do _today_ to help Python remain a first choice language to solve real-world
  problems for the years to come
* Look carefully what happened to other (once very popular and praised) languages
* Enter
+
Black Swan:: A surprise event that has major effect but is easily explained...
* ... (in hindsight)
* Back then ...:
+
[quote, Thomas John Watson&comma; CEO of IBM, (1943)]
____________________________________________________________________
I think there is a world market for maybe five computers.
____________________________________________________________________


Russell Keith-Magee: Keynote: Future of Python (2)
--------------------------------------------------
[role="incremental"]
* Examples of dangerous assumptions:
** BS 1: everyone is using a laptop
** BS 2: Python can stay on the server 
** BS 3: Installation is a solved problem 
** BS 4: Code distribution doesn't matter
* A call to us all to challenge your assumptions!
** And look what the ``competition'' is doing (easily installable software packages)
* Python on Web-Assembly (WASM)
** Who knows what this is?
* Reflection on how some people behave on the internet
** Risk of burn-out

Russell Keith-Magee: Keynote: Future of Python (3)
--------------------------------------------------
[role="incremental"]
* How to make progress?
** Sometimes people simply must be paid to get things done
** A call to think about how to do R&D on Python
* 5 calls to action
** Start thinking about Black Swans
** Improve resourcing of maintenance and R&D costs
** Value contributors 
** Fund projects- convince your employer 
** Contribute!


Reuven M. Lerner - Practical Decorators
---------------------------------------
[role="incremental"]
* Nice talk about _decorators_
* [Who knows what _decorators_ are?]✋
* High pace - stay alert!
* Question: how many _callables_ are there in the following code fragment?
+
[source,python]
.Python source
---------------------------------------------------------------------
@max_n_times(10)
def add(a, b):
    return a + b
---------------------------------------------------------------------
* [Who knows what _callables_ are?]✋
* It depends perhaps a bit on the implementation of `max_n_times`, ...


Reuven M. Lerner - Practical Decorators (2)
-------------------------------------------
[role="incremental"]
* ... *4* _callables_
+
[source,python]
.Typical `max_n_times` implementation
---------------------------------------------------------------------
def max_n_times(n):                                             <2>

    def middle(func):                                           <3>
        times_invoked = 0

        def wrapper(*args, **kwargs):                           <4>
	    nonlocal times_invoked

	    if times_invoked == n:
	        raise CalledTooManyTimesError(...)
	    times_invoked += 1
	    return func(*args, **kwargs)                        <1>

        return wrapper

    return middle
---------------------------------------------------------------------

Reuven M. Lerner - Practical Decorators (3)
-------------------------------------------
=== Conclusions
[role="incremental"]
* Decorators let you DRY up your callables
* Understanding how many callables are involved makes it easier
  to see what problems can be solved, and how
* Decorators make it dramatically easier to do many things
* Of course, much of this depends on the fact that in
  Python, callables (functions and classes) are object like
  any other -- and can be passed and returned easily


Thea Flowers - Three excellent Python tools to automate repetitive tasks
------------------------------------------------------------------------
In short:
[role="incremental"]
* You have *Tox*
** Great for automating Python _package testing_
*** Different Python versions,
*** setting up environments,
*** integrating with many known test frameworks
* You have *Nox*
** (Thea's own tool)
** For automating Python _projects_
** Configuring is done in Python language
* You have *invoke*
** Task based automation (partly a _make_-replacement)
** You can use it to automate repetitive tasks during
   maintenance of your code
*** e.g. bumping a version number, or
*** adding a line to your `Changelog` file


Raymond Hettinger - Modern solvers: Problems well-defined are problems solved
-----------------------------------------------------------------------------
[role="incremental"]
* Interesting presentation about problem solvers
* Python's (packages) rich capabilities for problem solving
* Problem solvers can be used to solve well defined problems
* ``It is easier to make rules than it is to follow them''
** State the rules, do not draft up an imperative recipe
* Breadth and Depth First Search
* SAT Solvers
* MTCS - Monte Carlo Tree Search
* Reinforcement Learning

Raymond Hettinger - Modern solvers: Problems well-defined are problems solved (2)
---------------------------------------------------------------------------------
[role="incremental"]
* Deep convolutional neural networks (AlphaZero)
** Learn to play complex games given only the rules to the game
** Beat the best human players and their best hand-written programs
** Learning time limit: Less than a day

* Slide material: https://rhettinger.github.io/


Edwin Jung - Mocking and Patching Pitfalls
------------------------------------------
[role="incremental"]
* [Who knows what _Mocks_ are?]✋
* [Who knows what _Patching_ is?]✋
* Interesting talk if you want to learn more on Mocking and Patching
* What you should refrain for doing in order to stay away from ``Mocking Hell''
* You learn to recognise warning signs when your code is not enough well designed
** One of the warning signs is when you need to do a lot of patching
* Shows (and identifies) antipatterns to watch out for
* Highly recommended -- go see it


Hannah Stepanek - Thinking like a Panda: Everything you need to know to use pandas the right way
------------------------------------------------------------------------------------------------
[role="incremental"]
* [Who knows what Pandas is?]✋
* Interesting talk about the inner workings of Pandas
* And how to keep the performance okay
* Actual examples shown with
** differences in memory occupation, depending on
*** how you store / organize your data
*** what type you associate your data with
** difference in CPU time, depending on
*** how you call certain functionality
*** inplace or not
*** whether your data was normalized beforehand

Hannah Stepanek - Thinking like a Panda: Everything you need to know to use pandas the right way (2)
----------------------------------------------------------------------------------------------------
[role="incremental"]
.Summary
* Avoid looping
* Normalize your data
* Use MultiIndexed DataFrames
* Use inplace operations
* Take advantage of _Cython_ when [really] needed
** Cython is a relatively easy way to implement part of your functionality
   in a Python like syntax, but is compiled to C
** with 40,000 rows: apply simple grade function using Cython vs. `pandas.apply` results in 5&nbsp;ms instead of 4&nbsp;mins

* If you are working a lot with Pandas, a must see (although ...)

* Slides: +https://t.co/VEAqOquB6B+


Lynn Root - Advanced asyncio: Solving Real-world Production Problems
--------------------------------------------------------------------
[role="incremental"]
* [Who of you has written asynchronous Python?]✋
* Real-world examples beyond the ``hello world'' tutorials
* Valuable lessons given when you start with async programmimng
* Shows you the ``construction'' of a basic asynchronous functionality
* But the talk also includes exmplanation and example code on
* how to _unittest_ your async routines
** using pytest
** including how to create async Mock routines
* how to _debug_ your asynchronous code
* how to _profile_ your asynchronous code

* Slides: +rogue.ly/adv-aio+


Dustin Ingram - PEP 572: The Walrus Operator
--------------------------------------------
[role="incremental"]
* [Who knows what the `Walrus Operator' is (about)?]✋
* It is just `:=`
** (and it looks a bit like a Walrus)
* &nbsp;
+
image::images/WalrusSticker.jpeg[Walrus-sticker]

Dustin Ingram - PEP 572: The Walrus Operator (2)
------------------------------------------------
[role="incremental"]
* Implements simple assignment as an _expression_ instead of a _statement_
* Can make code more elegant, and without losing performance
+
[source,python]
.Some nice examples are being presented, e.g.:
---------------------------------------------------------------------
chunk = file.read(8192)
while chunk:
    process(chunk)
    chunk = file.read(8192)
---------------------------------------------------------------------
* Drawback: `file.read(8192)` is repeated twice
* &nbsp;
+
[source,python]
.Can be changed into:
---------------------------------------------------------------------
while chunk := file.read(8192):
    process(chunk)
---------------------------------------------------------------------

Dustin Ingram - PEP 572: The Walrus Operator (3)
------------------------------------------------
[role="incremental"]
* But it is also a call upon the community to be nice on the internet
* especially to all those wonderful people who are bringing us all this nice functionality


Wrapping up
-----------
.What other interesting talks?
[role="incremental"]
* Ariel Ortiz - The Perils of Inheritance: Why We Should Prefer Composition
* Shannon Zhu - Leveraging the Type System to Write Secure Applications
* Terri Oda - Python Security Tools
* Paul Ganssle - Working with Time Zones: Everything You Wish You Didn't Need to Know
* Eric Snow - to GIL or not to GIL: the Future of Multi-Core &lpar;C&rpar;Python
* Matthew Page - How to JIT: Writing a Python JIT from scratch in pure Python
* Nicolle Cysneiros- Eita! Why Internationalization and Localization matter

.What I would have liked to attend:
[role="incremental"]
* API evolution the right way
* From days to minutes, from minutes to milliseconds with SQLAlchemy
* Making Music with Python, SuperCollider and FoxDot
* Everything at Once: Python's Many Concurrency Models



// FIXME: TODO: check which hyphens should be doubled

// At the end:

Finally
-------
.What did it bring me?
[role="incremental"]
* Impressed by the community feeling
** positive vibe
** inclusivity
* Got enthousiastic about publishing my own packages (utilities)
** It is just not that difficult
* Looking for ways to contribute in projects
** Perhaps fixing some outstanding issues in one of the projects
* Got to know some new packages I didn't know about

.Links
[role="incremental"]
* https://us.pycon.org/2019/
* https://pyvideo.org/events/pycon-us-2019.html
